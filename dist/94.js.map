{"version":3,"file":"94.js","mappings":"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","sources":["webpack://sleact-ts-front/./pages/DirectMessage/styles.tsx","webpack://sleact-ts-front/./pages/DirectMessage/index.tsx"],"sourcesContent":["import styled from '@emotion/styled';\r\n\r\nexport const Container = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  height: calc(100vh - 38px);\r\n  flex-flow: column;\r\n  position: relative;\r\n`;\r\n\r\nexport const Header = styled.header`\r\n  height: 64px;\r\n  display: flex;\r\n  width: 100%;\r\n  --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\r\n  box-shadow: 0 1px 0 var(--saf-0);\r\n  padding: 20px 16px 20px 20px;\r\n  font-weight: bold;\r\n  align-items: center;\r\n  & img {\r\n    margin-right: 5px;\r\n  }\r\n`;\r\n\r\nexport const DragOver = styled.div`\r\n  position: absolute;\r\n  top: 64px;\r\n  left: 0;\r\n  width: 100%;\r\n  height: calc(100% - 64px);\r\n  background: white;\r\n  opacity: 0.7;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-size: 40px;\r\n`;\r\n","import Workspace from '@layouts/Workspace';\r\nimport React, { useCallback, useEffect, useRef } from 'react';\r\nimport gravatar from 'gravatar';\r\nimport useSWR from 'swr';\r\nimport useSWRInfinite from 'swr/infinite';\r\nimport fetcher from '@utils/fetcher';\r\nimport { Container, Header } from './styles';\r\nimport { useParams } from 'react-router';\r\nimport ChatBox from '@components/ChatBox';\r\nimport ChatList from '@components/ChatList';\r\nimport useInput from '@hooks/useInput';\r\nimport { IDM } from '@typings/db';\r\nimport axios from 'axios';\r\nimport makeSection from '@utils/makeSection';\r\nimport Scrollbars from 'react-custom-scrollbars-2';\r\nimport useSocket from '@hooks/useSocket';\r\n\r\nconst DirectMessage = () => {\r\n  const { workspace, id } = useParams<{ workspace: string; id: string }>();\r\n  const { data: userData } = useSWR(`api/workspaces/${workspace}/users/${id}`, fetcher);\r\n  const { data: myData } = useSWR(`api/users`, fetcher);\r\n  const [chat, onChangeChat, setChat] = useInput('');\r\n  const {\r\n    data: chatData,\r\n    mutate: mutateChat,\r\n    setSize,\r\n  } = useSWRInfinite<IDM[]>(\r\n    (index) => `/api/workspaces/${workspace}/dms/${id}/chats?perPage=20&page=${index + 1}`,\r\n    fetcher,\r\n  );\r\n  const [socket] = useSocket(workspace);\r\n  const isEmpty = chatData?.[0]?.length === 0;\r\n  const isReachingEnd = isEmpty || (chatData && chatData[chatData.length - 1]?.length < 20) || false;\r\n\r\n  const scrollbarRef = useRef<Scrollbars>(null);\r\n\r\n  const onSubmitForm = useCallback(\r\n    (e) => {\r\n      e.preventDefault();\r\n      console.log(chat);\r\n      if (chat?.trim() && chatData) {\r\n        const savedChat = chat;\r\n        mutateChat((prevChatData) => {\r\n          prevChatData?.[0].unshift({\r\n            id: (chatData[0][0]?.id || 0) + 1,\r\n            content: savedChat,\r\n            SenderId: myData.id,\r\n            Sender: myData,\r\n            ReceiverId: userData.id,\r\n            Receiver: userData,\r\n            createdAt: new Date(),\r\n          });\r\n          return prevChatData;\r\n        }, false).then(() => {\r\n          setChat('');\r\n          scrollbarRef.current?.scrollToBottom();\r\n        });\r\n        axios\r\n          .post(`/api/workspaces/${workspace}/dms/${id}/chats`, {\r\n            content: chat,\r\n          })\r\n          .then(() => {\r\n            mutateChat();\r\n          })\r\n          .catch(console.error);\r\n      }\r\n    },\r\n    [chat, chatData, myData, userData, workspace, id],\r\n  );\r\n\r\n  const onMessage = useCallback((data: IDM) => {\r\n    // id는 상대방 아이디\r\n    if (data.SenderId === Number(id) && myData.id !== Number(id)) {\r\n      mutateChat((chatData) => {\r\n        chatData?.[0].unshift(data);\r\n        return chatData;\r\n      }, false).then(() => {\r\n        if (scrollbarRef.current) {\r\n          if (\r\n            scrollbarRef.current.getScrollHeight() <\r\n            scrollbarRef.current.getClientHeight() + scrollbarRef.current.getScrollTop() + 150\r\n          ) {\r\n            console.log('scrollToBottom!', scrollbarRef.current?.getValues());\r\n            setTimeout(() => {\r\n              scrollbarRef.current?.scrollToBottom();\r\n            }, 50);\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    socket?.on('dm', onMessage);\r\n    return () => {\r\n      socket?.off('dm', onMessage);\r\n    };\r\n  }, [socket, onMessage]);\r\n\r\n  // 로딩 시 스크롤바 제일 아래로\r\n  useEffect(() => {\r\n    if (chatData?.length === 1) {\r\n      setTimeout(() => {\r\n        scrollbarRef.current?.scrollToBottom();\r\n      }, 100);\r\n    }\r\n  }, [chatData]);\r\n\r\n  if (!userData || !myData) {\r\n    return null;\r\n  }\r\n\r\n  const chatSections = makeSection(chatData ? chatData.flat().reverse() : []);\r\n\r\n  return (\r\n    <Workspace>\r\n      <Container>\r\n        <Header>\r\n          <img src={gravatar.url(userData.email, { s: '24px', d: 'retro' })} alt={userData.nickname} />\r\n          <span>{userData.nickname}</span>\r\n        </Header>\r\n        <ChatList chatSections={chatSections} ref={scrollbarRef} setSize={setSize} isReachingEnd={isReachingEnd} />\r\n        <ChatBox chat={chat} onChangeChat={onChangeChat} onSubmitForm={onSubmitForm} />\r\n      </Container>\r\n    </Workspace>\r\n  );\r\n};\r\n\r\nexport default DirectMessage;\r\n"],"names":["Container","styled","_templateObject","_taggedTemplateLiteral","Header","_templateObject2","_templateObject3","_chatData$","_chatData","_useParams","useParams","workspace","id","userData","useSWR","concat","fetcher","data","myData","_useInput2","_slicedToArray","useInput","chat","onChangeChat","setChat","_useSWRInfinite","useSWRInfinite","index","chatData","mutateChat","mutate","setSize","socket","useSocket","isReachingEnd","length","scrollbarRef","useRef","onSubmitForm","useCallback","e","preventDefault","console","log","trim","savedChat","prevChatData","_chatData$0$","unshift","content","SenderId","Sender","ReceiverId","Receiver","createdAt","Date","then","_scrollbarRef$current","current","scrollToBottom","axios","catch","error","onMessage","Number","_scrollbarRef$current2","getScrollHeight","getClientHeight","getScrollTop","getValues","setTimeout","_scrollbarRef$current3","useEffect","on","off","_scrollbarRef$current4","chatSections","makeSection","flat","reverse","React","Workspace","src","gravatar","email","s","d","alt","nickname","ChatList","ref","ChatBox"],"sourceRoot":""}