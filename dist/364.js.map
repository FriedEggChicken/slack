{"version":3,"file":"364.js","mappings":"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","sources":["webpack://sleact-ts-front/./components/ChatBox/styles.tsx","webpack://sleact-ts-front/./components/ChatBox/index.tsx","webpack://sleact-ts-front/./components/ChatList/styles.tsx","webpack://sleact-ts-front/./components/Chat/styles.tsx","webpack://sleact-ts-front/./components/Chat/index.tsx","webpack://sleact-ts-front/./components/ChatList/index.tsx","webpack://sleact-ts-front/./components/InviteChannelModal/index.tsx","webpack://sleact-ts-front/./components/Modal/styles.tsx","webpack://sleact-ts-front/./components/Modal/index.tsx","webpack://sleact-ts-front/./hooks/useInput.ts","webpack://sleact-ts-front/./hooks/useSocket.ts","webpack://sleact-ts-front/./layouts/Workspace/styles.tsx","webpack://sleact-ts-front/./components/Menu/styles.tsx","webpack://sleact-ts-front/./components/Menu/index.tsx","webpack://sleact-ts-front/./components/CreateChannelModal/index.tsx","webpack://sleact-ts-front/./components/InviteWorkspaceModal/index.tsx","webpack://sleact-ts-front/./components/DMList/styles.tsx","webpack://sleact-ts-front/./components/DMList/index.tsx","webpack://sleact-ts-front/./components/ChannelList/index.tsx","webpack://sleact-ts-front/./layouts/Workspace/index.tsx","webpack://sleact-ts-front/./pages/SignUp/styles.tsx","webpack://sleact-ts-front/./utils/fetcher.ts","webpack://sleact-ts-front/./utils/makeSection.ts"],"sourcesContent":["import styled from '@emotion/styled';\r\nimport { MentionsInput } from 'react-mentions';\r\n\r\nexport const ChatArea = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  padding: 20px;\r\n  padding-top: 0;\r\n`;\r\n\r\nexport const Form = styled.form`\r\n  color: rgb(29, 28, 29);\r\n  font-size: 15px;\r\n  width: 100%;\r\n  border-radius: 4px;\r\n  border: 1px solid rgb(29, 28, 29);\r\n`;\r\n\r\nexport const MentionsTextarea = styled(MentionsInput)`\r\n  font-family: Slack-Lato, appleLogo, sans-serif;\r\n  font-size: 15px;\r\n  padding: 8px 9px;\r\n  width: 100%;\r\n  & strong {\r\n    background: skyblue;\r\n  }\r\n  & textarea {\r\n    height: 44px;\r\n    padding: 9px 10px !important;\r\n    outline: none !important;\r\n    border-radius: 4px !important;\r\n    resize: none !important;\r\n    line-height: 22px;\r\n    border: none;\r\n  }\r\n  & ul {\r\n    border: 1px solid lightgray;\r\n    max-height: 200px;\r\n    overflow-y: auto;\r\n    padding: 9px 10px;\r\n    background: white;\r\n    border-radius: 4px;\r\n    width: 150px;\r\n  }\r\n`;\r\n\r\nexport const Toolbox = styled.div`\r\n  position: relative;\r\n  background: rgb(248, 248, 248);\r\n  height: 41px;\r\n  display: flex;\r\n  border-top: 1px solid rgb(221, 221, 221);\r\n  align-items: center;\r\n  border-bottom-left-radius: 4px;\r\n  border-bottom-right-radius: 4px;\r\n`;\r\n\r\nexport const SendButton = styled.button`\r\n  position: absolute;\r\n  right: 5px;\r\n  top: 5px;\r\n`;\r\n\r\nexport const EachMention = styled.button<{ focus: boolean }>`\r\n  padding: 4px 20px;\r\n  background: transparent;\r\n  border: none;\r\n  display: flex;\r\n  align-items: center;\r\n  color: rgb(28, 29, 28);\r\n  width: 100%;\r\n  & img {\r\n    margin-right: 5px;\r\n  }\r\n  ${({ focus }) =>\r\n    focus &&\r\n    `\r\n    background: #1264a3;\r\n    color: white;\r\n  `};\r\n`;\r\n","import { ChatArea, EachMention, Form, MentionsTextarea, SendButton, Toolbox } from './styles';\r\nimport React, { VFC, useCallback, useEffect, useRef } from 'react';\r\nimport autosize from 'autosize';\r\nimport { Mention, SuggestionDataItem } from 'react-mentions';\r\nimport { useParams } from 'react-router';\r\nimport useSWR from 'swr';\r\nimport { IUser } from '@typings/db';\r\nimport fetcher from '@utils/fetcher';\r\nimport gravatar from 'gravatar';\r\n\r\ninterface Props {\r\n  chat: string;\r\n  onSubmitForm: (e: any) => void;\r\n  onChangeChat: (e: any) => void;\r\n  placeholder?: string;\r\n}\r\n\r\nconst ChatBox: VFC<Props> = ({ chat, onSubmitForm, onChangeChat, placeholder }) => {\r\n  const { workspace } = useParams<{ workspace: string }>();\r\n  const {\r\n    data: userData,\r\n    error,\r\n    mutate,\r\n  } = useSWR<IUser | false>('/api/users', fetcher, {\r\n    dedupingInterval: 2000, // 2초\r\n  });\r\n  const { data: memberData } = useSWR<IUser[]>(userData ? `/api/workspaces/${workspace}/members` : null, fetcher);\r\n\r\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\r\n  useEffect(() => {\r\n    if (textareaRef.current) {\r\n      autosize(textareaRef.current);\r\n    }\r\n  }, []);\r\n\r\n  const onKeydownChat = useCallback(\r\n    (e) => {\r\n      if (e.key === 'Enter') {\r\n        if (!e.shiftKey) {\r\n          e.preventDefault();\r\n          onSubmitForm(e);\r\n        }\r\n      }\r\n    },\r\n    [onSubmitForm],\r\n  );\r\n\r\n  const renderSuggestion = useCallback(\r\n    (\r\n      suggestion: SuggestionDataItem,\r\n      search: string,\r\n      highlightedDisplay: React.ReactNode,\r\n      index: number,\r\n      focus: boolean,\r\n    ): React.ReactNode => {\r\n      if (!memberData) return;\r\n      return (\r\n        <EachMention focus={focus}>\r\n          <img\r\n            src={gravatar.url(memberData[index].email, { s: '20px', d: 'retro' })}\r\n            alt={memberData[index].nickname}\r\n          />\r\n          <span>{highlightedDisplay}</span>\r\n        </EachMention>\r\n      );\r\n    },\r\n    [memberData],\r\n  );\r\n\r\n  return (\r\n    <ChatArea>\r\n      <Form onSubmit={onSubmitForm}>\r\n        <MentionsTextarea\r\n          id=\"editor-chat\"\r\n          value={chat}\r\n          onChange={onChangeChat}\r\n          onKeyDown={onKeydownChat}\r\n          placeholder={placeholder}\r\n          inputRef={textareaRef}\r\n          allowSuggestionsAboveCursor\r\n        >\r\n          <Mention\r\n            appendSpaceOnAdd\r\n            trigger=\"@\"\r\n            data={memberData?.map((v) => ({ id: v.id, display: v.nickname })) || []}\r\n            renderSuggestion={renderSuggestion}\r\n          />\r\n        </MentionsTextarea>\r\n        <Toolbox>\r\n          <SendButton\r\n            className={\r\n              'c-button-unstyled c-icon_button c-icon_button--light c-icon_button--size_medium c-texty_input__button c-texty_input__button--send' +\r\n              (chat?.trim() ? '' : ' c-texty_input__button--disabled')\r\n            }\r\n            data-qa=\"texty_send_button\"\r\n            aria-label=\"Send message\"\r\n            data-sk=\"tooltip_parent\"\r\n            type=\"submit\"\r\n            disabled={!chat?.trim()}\r\n          >\r\n            <i className=\"c-icon c-icon--paperplane-filled\" aria-hidden=\"true\" />\r\n          </SendButton>\r\n        </Toolbox>\r\n      </Form>\r\n    </ChatArea>\r\n  );\r\n};\r\n\r\nexport default ChatBox;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const ChatZone = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  flex: 1;\r\n`;\r\n\r\nexport const Section = styled.section`\r\n  margin-top: 20px;\r\n  border-top: 1px solid #eee;\r\n`;\r\n\r\nexport const StickyHeader = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  flex: 1;\r\n  width: 100%;\r\n  position: sticky;\r\n  top: 14px;\r\n  & button {\r\n    font-weight: bold;\r\n    font-size: 13px;\r\n    height: 28px;\r\n    line-height: 27px;\r\n    padding: 0 16px;\r\n    z-index: 2;\r\n    --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\r\n    box-shadow: 0 0 0 1px var(--saf-0), 0 1px 3px 0 rgba(0, 0, 0, 0.08);\r\n    border-radius: 24px;\r\n    position: relative;\r\n    top: -13px;\r\n    background: white;\r\n    border: none;\r\n    outline: none;\r\n  }\r\n`;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const ChatWrapper = styled.div`\r\n  display: flex;\r\n  padding: 8px 20px;\r\n  &:hover {\r\n    background: #eee;\r\n  }\r\n  & .chat-img {\r\n    display: flex;\r\n    width: 36px;\r\n    margin-right: 8px;\r\n    & img {\r\n      width: 36px;\r\n      height: 36px;\r\n    }\r\n  }\r\n`;\r\n","import { IDM, IChat } from '@typings/db';\r\nimport React, { VFC, memo, useMemo } from 'react';\r\nimport { ChatWrapper } from './styles';\r\nimport gravatar from 'gravatar';\r\nimport dayjs from 'dayjs';\r\nimport regexifyString from 'regexify-string';\r\nimport { Link, useParams } from 'react-router-dom';\r\n\r\ninterface Props {\r\n  data: IDM | IChat;\r\n}\r\nconst Chat: VFC<Props> = ({ data }) => {\r\n  const { workspace } = useParams<{ workspace: string; channel: string }>();\r\n  const user = 'Sender' in data ? data.Sender : data.User;\r\n\r\n  //[name](7) \\ 특수기호 능력 무력화\r\n  // + 는 1개 이상, ?는 0개 이상 g는 모두찾기\r\n  // +?는 최대한 조금 찾기 @[제초로]12] 제초로까지 찾음\r\n  const result = useMemo(\r\n    () =>\r\n      regexifyString({\r\n        input: data.content,\r\n        pattern: /@\\[(.+?)]\\((\\d+?)\\)|\\n/g,\r\n        decorator(match, index) {\r\n          const arr: string[] | null = match.match(/@\\[(.+?)]\\((\\d+?)\\)/)!;\r\n          if (arr) {\r\n            return (\r\n              <Link key={match + index} to={`/workspace/${workspace}/dm/${arr[2]}`}>\r\n                @{arr[1]}\r\n              </Link>\r\n            );\r\n          }\r\n          return <br key={index} />;\r\n        },\r\n      }),\r\n    [data.content],\r\n  );\r\n\r\n  return (\r\n    <ChatWrapper>\r\n      <div className=\"chat-img\">\r\n        <img src={gravatar.url(user.email, { s: '36px', d: 'retro' })} alt={user.nickname} />\r\n      </div>\r\n      <div className=\"chat-text\">\r\n        <div className=\"chat-user\">\r\n          <b>{user.nickname}</b>\r\n          <span>{dayjs(data.createdAt).format('h:mm A')}</span>\r\n        </div>\r\n        <p>{result}</p>\r\n      </div>\r\n    </ChatWrapper>\r\n  );\r\n};\r\n\r\nexport default memo(Chat);\r\n","import React, { VFC, useCallback, useRef, forwardRef, MutableRefObject } from 'react';\r\nimport { ChatZone, Section, StickyHeader } from './styles';\r\nimport { IChat, IDM } from '@typings/db';\r\nimport Chat from '@components/Chat';\r\nimport { Scrollbars } from 'react-custom-scrollbars-2';\r\n\r\ninterface Props {\r\n  chatSections: { [key: string]: (IDM | IChat)[] };\r\n  setSize: (f: (size: number) => number) => Promise<(IDM | IChat)[][] | undefined>;\r\n\r\n  isReachingEnd: boolean;\r\n}\r\n\r\nconst ChatList = forwardRef<Scrollbars, Props>(({ chatSections, setSize, isReachingEnd }, scrollRef) => {\r\n  const onScroll = useCallback((values) => {\r\n    if (values.scrollTop === 0 && !isReachingEnd) {\r\n      console.log('가장 위');\r\n      setSize((prevSize) => prevSize + 1).then(() => {\r\n        // 스크롤 위치 유지\r\n        const current = (scrollRef as MutableRefObject<Scrollbars>)?.current;\r\n        if (current) {\r\n          current.scrollTop(current.getScrollHeight() - values.scrollHeight);\r\n        }\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <ChatZone>\r\n      <Scrollbars autoHide ref={scrollRef} onScrollFrame={onScroll}>\r\n        {Object.entries(chatSections).map(([date, chats]) => {\r\n          return (\r\n            <Section className={`section-${date}`} key={date}>\r\n              <StickyHeader>\r\n                <button>{date}</button>\r\n              </StickyHeader>\r\n              {chats.map((chat) => (\r\n                <Chat key={chat.id} data={chat} />\r\n              ))}\r\n            </Section>\r\n          );\r\n        })}\r\n      </Scrollbars>\r\n    </ChatZone>\r\n  );\r\n});\r\n\r\nexport default ChatList;\r\n","import Modal from '@components/Modal';\r\nimport useInput from '@hooks/useInput';\r\nimport { Button, Input, Label } from '@pages/SignUp/styles';\r\nimport { IUser } from '@typings/db';\r\nimport fetcher from '@utils/fetcher';\r\nimport axios from 'axios';\r\nimport React, { FC, useCallback } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport { toast } from 'react-toastify';\r\nimport useSWR from 'swr';\r\n\r\ninterface Props {\r\n  show: boolean;\r\n  onCloseModal: () => void;\r\n  setShowInviteChannelModal: (flag: boolean) => void;\r\n}\r\nconst InviteChannelModal: FC<Props> = ({ show, onCloseModal, setShowInviteChannelModal }) => {\r\n  const { workspace, channel } = useParams<{ workspace: string; channel: string }>();\r\n  const [newMember, onChangeNewMember, setNewMember] = useInput('');\r\n  const { data: userData } = useSWR<IUser>('/api/users', fetcher);\r\n  const { mutate: revalidateMembers } = useSWR<IUser[]>(\r\n    userData && channel ? `/api/workspaces/${workspace}/channels/${channel}/members` : null,\r\n    fetcher,\r\n  );\r\n\r\n  const onInviteMember = useCallback(\r\n    (e) => {\r\n      e.preventDefault();\r\n      if (!newMember || !newMember.trim()) {\r\n        return;\r\n      }\r\n      axios\r\n        .post(`/api/workspaces/${workspace}/channels/${channel}/members`, {\r\n          email: newMember,\r\n        })\r\n        .then(() => {\r\n          revalidateMembers();\r\n          setShowInviteChannelModal(false);\r\n          setNewMember('');\r\n        })\r\n        .catch((error) => {\r\n          console.dir(error);\r\n          toast.error(error.response?.data, { position: 'bottom-center' });\r\n        });\r\n    },\r\n    [newMember],\r\n  );\r\n\r\n  return (\r\n    <Modal show={show} onCloseModal={onCloseModal}>\r\n      <form onSubmit={onInviteMember}>\r\n        <Label id=\"member-label\">\r\n          <span>채널 멤버 초대</span>\r\n          <Input id=\"member\" value={newMember} onChange={onChangeNewMember} />\r\n        </Label>\r\n        <Button type=\"submit\">초대하기</Button>\r\n      </form>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default InviteChannelModal;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const CreateModal = styled.div`\r\n  position: fixed;\r\n  text-align: center;\r\n  left: 0;\r\n  bottom: 0;\r\n  top: 0;\r\n  right: 0;\r\n  z-index: 1022;\r\n  & > div {\r\n    margin-top: 200px;\r\n    display: inline-block;\r\n    width: 440px;\r\n    background: white;\r\n    --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\r\n    box-shadow: 0 0 0 1px var(--saf-0), 0 4px 12px 0 rgba(0, 0, 0, 0.12);\r\n    background-color: rgba(var(--sk_foreground_min_solid, 248, 248, 248), 1);\r\n    border-radius: 6px;\r\n    user-select: none;\r\n    max-width: 440px;\r\n    padding: 30px 40px 0;\r\n    z-index: 1012;\r\n    position: relative;\r\n  }\r\n`;\r\n\r\nexport const CloseModalButton = styled.button`\r\n  position: absolute;\r\n  right: 10px;\r\n  top: 6px;\r\n  background: transparent;\r\n  border: none;\r\n  font-size: 30px;\r\n  cursor: pointer;\r\n`;\r\n","import { CloseModalButton } from './styles';\r\nimport React, { FC, useCallback } from 'react';\r\nimport { CreateModal } from './styles';\r\n\r\ninterface Props {\r\n  show: boolean;\r\n  onCloseModal: () => void;\r\n}\r\n\r\nconst Modal: FC<Props> = ({ show, children, onCloseModal }) => {\r\n  const stopPropagation = useCallback((e) => {\r\n    e.stopPropagation();\r\n  }, []);\r\n\r\n  if (!show) {\r\n    return null;\r\n  }\r\n  return (\r\n    <CreateModal onClick={onCloseModal}>\r\n      <div onClick={stopPropagation}>\r\n        <CloseModalButton onClick={onCloseModal}>&times;</CloseModalButton>\r\n        {children}\r\n      </div>\r\n    </CreateModal>\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n","import { ChangeEvent, Dispatch, SetStateAction, useCallback, useState } from 'react';\r\n\r\ntype ReturnTypes<T> = [T, (e: ChangeEvent<HTMLInputElement>) => void, Dispatch<SetStateAction<T>>];\r\nconst useInput = <T>(initialData: T): ReturnTypes<T> => {\r\n  const [value, setValue] = useState(initialData);\r\n  const handler = useCallback((e) => {\r\n    setValue(e.target.value);\r\n  }, []);\r\n  return [value, handler, setValue];\r\n};\r\n\r\nexport default useInput;\r\n","import io, { Socket } from 'socket.io-client';\r\nimport { useCallback } from 'react';\r\n\r\nconst backUrl = 'http://localhost:3095';\r\n\r\nconst sockets: { [key: string]: SocketIOClient.Socket } = {};\r\nconst useSocket = (workspace?: string): [SocketIOClient.Socket | undefined, () => void] => {\r\n  const disconnect = useCallback(() => {\r\n    if (workspace) {\r\n      sockets[workspace].disconnect();\r\n      delete sockets[workspace];\r\n    }\r\n  }, [workspace]);\r\n\r\n  if (!workspace) {\r\n    return [undefined, disconnect];\r\n  }\r\n\r\n  if (!sockets[workspace]) {\r\n    sockets[workspace] = io.connect(`${backUrl}/ws-${workspace}`, {\r\n      transports: ['websocket'],\r\n    });\r\n  }\r\n\r\n  return [sockets[workspace], disconnect];\r\n};\r\n\r\nexport default useSocket;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const RightMenu = styled.div`\r\n  float: right;\r\n`;\r\n\r\nexport const Header = styled.header`\r\n  height: 38px;\r\n  background: #350d36;\r\n  color: #ffffff;\r\n  box-shadow: 0 1px 0 0 rgba(255, 255, 255, 0.1);\r\n  padding: 5px;\r\n  text-align: center;\r\n`;\r\n\r\nexport const ProfileImg = styled.img`\r\n  width: 28px;\r\n  height: 28px;\r\n  position: absolute;\r\n  top: 5px;\r\n  right: 16px;\r\n`;\r\n\r\nexport const ProfileModal = styled.div`\r\n  display: flex;\r\n  padding: 20px;\r\n  & img {\r\n    display: flex;\r\n  }\r\n  & > div {\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin-left: 10px;\r\n  }\r\n  & #profile-name {\r\n    font-weight: bold;\r\n    display: inline-flex;\r\n  }\r\n  & #profile-active {\r\n    font-size: 13px;\r\n    display: inline-flex;\r\n  }\r\n`;\r\n\r\nexport const LogOutButton = styled.button`\r\n  border: none;\r\n  width: 100%;\r\n  border-top: 1px solid rgb(29, 28, 29);\r\n  background: transparent;\r\n  display: block;\r\n  height: 33px;\r\n  padding: 5px 20px 5px;\r\n  outline: none;\r\n  cursor: pointer;\r\n`;\r\n\r\nexport const WorkspaceWrapper = styled.div`\r\n  display: flex;\r\n  flex: 1;\r\n`;\r\n\r\nexport const Workspaces = styled.div`\r\n  width: 65px;\r\n  display: inline-flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  background: #3f0e40;\r\n  border-top: 1px solid rgb(82, 38, 83);\r\n  border-right: 1px solid rgb(82, 38, 83);\r\n  vertical-align: top;\r\n  text-align: center;\r\n  padding: 15px 0 0;\r\n`;\r\n\r\nexport const Channels = styled.nav`\r\n  width: 260px;\r\n  display: inline-flex;\r\n  flex-direction: column;\r\n  background: #3f0e40;\r\n  color: rgb(188, 171, 188);\r\n  vertical-align: top;\r\n  & a {\r\n    padding-left: 36px;\r\n    color: inherit;\r\n    text-decoration: none;\r\n    height: 28px;\r\n    line-height: 28px;\r\n    display: flex;\r\n    align-items: center;\r\n    &.selected {\r\n      color: white;\r\n    }\r\n  }\r\n  & .bold {\r\n    color: white;\r\n    font-weight: bold;\r\n  }\r\n  & .count {\r\n    margin-left: auto;\r\n    background: #cd2553;\r\n    border-radius: 16px;\r\n    display: inline-block;\r\n    font-size: 12px;\r\n    font-weight: 700;\r\n    height: 18px;\r\n    line-height: 18px;\r\n    padding: 0 9px;\r\n    color: white;\r\n    margin-right: 16px;\r\n  }\r\n  & h2 {\r\n    height: 36px;\r\n    line-height: 36px;\r\n    margin: 0;\r\n    text-overflow: ellipsis;\r\n    overflow: hidden;\r\n    white-space: nowrap;\r\n    font-size: 15px;\r\n  }\r\n`;\r\n\r\nexport const WorkspaceName = styled.button`\r\n  height: 64px;\r\n  line-height: 64px;\r\n  border: none;\r\n  width: 100%;\r\n  text-align: left;\r\n  border-top: 1px solid rgb(82, 38, 83);\r\n  border-bottom: 1px solid rgb(82, 38, 83);\r\n  font-weight: 900;\r\n  font-size: 24px;\r\n  background: transparent;\r\n  text-overflow: ellipsis;\r\n  overflow: hidden;\r\n  white-space: nowrap;\r\n  padding: 0;\r\n  padding-left: 16px;\r\n  margin: 0;\r\n  color: white;\r\n  cursor: pointer;\r\n`;\r\n\r\nexport const MenuScroll = styled.div`\r\n  height: calc(100vh - 102px);\r\n  overflow-y: auto;\r\n`;\r\n\r\nexport const WorkspaceModal = styled.div`\r\n  padding: 10px 0 0;\r\n  & h2 {\r\n    padding-left: 20px;\r\n  }\r\n  & > button {\r\n    width: 100%;\r\n    height: 28px;\r\n    padding: 4px;\r\n    border: none;\r\n    background: transparent;\r\n    border-top: 1px solid rgb(28, 29, 28);\r\n    cursor: pointer;\r\n    &:last-of-type {\r\n      border-bottom: 1px solid rgb(28, 29, 28);\r\n    }\r\n  }\r\n`;\r\n\r\nexport const Chats = styled.div`\r\n  flex: 1;\r\n`;\r\n\r\nexport const AddButton = styled.button`\r\n  color: white;\r\n  font-size: 24px;\r\n  display: inline-block;\r\n  width: 40px;\r\n  height: 40px;\r\n  background: transparent;\r\n  border: none;\r\n  cursor: pointer;\r\n`;\r\n\r\nexport const WorkspaceButton = styled.button`\r\n  display: inline-block;\r\n  width: 40px;\r\n  height: 40px;\r\n  border-radius: 10px;\r\n  background: white;\r\n  border: 3px solid #3f0e40;\r\n  margin-bottom: 15px;\r\n  font-size: 18px;\r\n  font-weight: 700;\r\n  color: black;\r\n  cursor: pointer;\r\n`;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const CreateMenu = styled.div`\r\n  position: fixed;\r\n  top: 0;\r\n  right: 0;\r\n  left: 0;\r\n  bottom: 0;\r\n  z-index: 1000;\r\n  & > div {\r\n    position: absolute;\r\n    display: inline-block;\r\n    --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\r\n    box-shadow: 0 0 0 1px var(--saf-0), 0 4px 12px 0 rgba(0, 0, 0, 0.12);\r\n    background-color: rgba(var(--sk_foreground_min_solid, 248, 248, 248), 1);\r\n    border-radius: 6px;\r\n    user-select: none;\r\n    min-width: 360px;\r\n    z-index: 512;\r\n    max-height: calc(100vh - 20px);\r\n    color: rgb(29, 28, 29);\r\n  }\r\n`;\r\n\r\nexport const CloseModalButton = styled.button`\r\n  position: absolute;\r\n  right: 10px;\r\n  top: 6px;\r\n  background: transparent;\r\n  border: none;\r\n  font-size: 30px;\r\n  cursor: pointer;\r\n`;\r\n","import React, { FC, CSSProperties, useCallback } from 'react';\r\nimport { CloseModalButton, CreateMenu } from './styles';\r\n\r\ninterface Props {\r\n  show: boolean;\r\n  onCloseModal: (e: any) => void;\r\n  style: CSSProperties;\r\n  closeButton?: boolean;\r\n}\r\n\r\nconst Menu: FC<Props> = ({ children, style, show, onCloseModal, closeButton }) => {\r\n  const stopPropagation = useCallback((e) => {\r\n    e.stopPropagation();\r\n  }, []);\r\n\r\n  if (!show) {\r\n    return null;\r\n  }\r\n  return (\r\n    <CreateMenu onClick={onCloseModal}>\r\n      <div style={style} onClick={stopPropagation}>\r\n        {closeButton && <CloseModalButton onClick={onCloseModal}>&times;</CloseModalButton>}\r\n        {children}\r\n      </div>\r\n    </CreateMenu>\r\n  );\r\n};\r\n\r\nMenu.defaultProps = {\r\n  closeButton: true,\r\n};\r\nexport default Menu;\r\n","import Modal from '@components/Modal';\r\nimport useInput from '@hooks/useInput';\r\nimport { Button, Input, Label } from '@pages/SignUp/styles';\r\nimport { IChannel, IUser } from '@typings/db';\r\nimport fetcher from '@utils/fetcher';\r\nimport axios from 'axios';\r\nimport React, { VFC, useCallback } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport { toast } from 'react-toastify';\r\nimport useSWR from 'swr';\r\n\r\ninterface Props {\r\n  show: boolean;\r\n  onCloseModal: () => void;\r\n  setShowCreateChannelModal: (flag: boolean) => void;\r\n}\r\n\r\nconst CreateChannelModal: VFC<Props> = ({ show, onCloseModal, setShowCreateChannelModal }) => {\r\n  const [newChannel, onChangeNewChannel, setNewChannel] = useInput('');\r\n  const { workspace, channel } = useParams<{ workspace: string; channel: string }>();\r\n\r\n  const {\r\n    data: userData,\r\n    error,\r\n    mutate,\r\n  } = useSWR<IUser | false>('/api/users', fetcher, {\r\n    dedupingInterval: 2000, // 2초\r\n  });\r\n  const { data: channelData, mutate: revalidateChannel } = useSWR<IChannel[]>(\r\n    userData ? `/api/workspaces/${workspace}/channels` : null,\r\n    fetcher,\r\n  );\r\n\r\n  const onCreateChannel = useCallback(\r\n    (e) => {\r\n      e.preventDefault();\r\n      axios\r\n        .post(\r\n          `/api/workspaces/${workspace}/channels`,\r\n          {\r\n            name: newChannel,\r\n          },\r\n          {\r\n            withCredentials: true,\r\n          },\r\n        )\r\n        .then(() => {\r\n          setShowCreateChannelModal(false);\r\n          revalidateChannel();\r\n          setNewChannel('');\r\n        })\r\n        .catch((error) => {\r\n          console.dir(error);\r\n          toast.error(error.response?.data, { position: 'bottom-center' });\r\n        });\r\n    },\r\n    [newChannel],\r\n  );\r\n  return (\r\n    <Modal show={show} onCloseModal={onCloseModal}>\r\n      <form onSubmit={onCreateChannel}>\r\n        <Label id=\"channel-label\">\r\n          <span>채널</span>\r\n          <Input id=\"channel\" value={newChannel} onChange={onChangeNewChannel} />\r\n        </Label>\r\n        <Button type=\"submit\">생성하기</Button>\r\n      </form>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default CreateChannelModal;\r\n","import Modal from '@components/Modal';\r\nimport useInput from '@hooks/useInput';\r\nimport { Button, Input, Label } from '@pages/SignUp/styles';\r\nimport { IChannel, IUser } from '@typings/db';\r\nimport fetcher from '@utils/fetcher';\r\nimport axios from 'axios';\r\nimport React, { FC, useCallback } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport { toast } from 'react-toastify';\r\nimport useSWR from 'swr';\r\n\r\ninterface Props {\r\n  show: boolean;\r\n  onCloseModal: () => void;\r\n  setShowInviteWorkspaceModal: (flag: boolean) => void;\r\n}\r\nconst InviteWorkspaceModal: FC<Props> = ({ show, onCloseModal, setShowInviteWorkspaceModal }) => {\r\n  const { workspace } = useParams<{ workspace: string; channel: string }>();\r\n  const [newMember, onChangeNewMember, setNewMember] = useInput('');\r\n  const { data: userData } = useSWR<IUser>('/api/users', fetcher);\r\n  const { mutate: revalidateMember } = useSWR<IChannel[]>(\r\n    userData ? `/api/workspaces/${workspace}/members` : null,\r\n    fetcher,\r\n  );\r\n\r\n  const onInviteMember = useCallback(\r\n    (e) => {\r\n      e.preventDefault();\r\n      if (!newMember || !newMember.trim()) {\r\n        return;\r\n      }\r\n      axios\r\n        .post(`/api/workspaces/${workspace}/members`, {\r\n          email: newMember,\r\n        })\r\n        .then((response) => {\r\n          revalidateMember();\r\n          setShowInviteWorkspaceModal(false);\r\n          setNewMember('');\r\n        })\r\n        .catch((error) => {\r\n          console.dir(error);\r\n          toast.error(error.response?.data, { position: 'bottom-center' });\r\n        });\r\n    },\r\n    [workspace, newMember],\r\n  );\r\n\r\n  return (\r\n    <Modal show={show} onCloseModal={onCloseModal}>\r\n      <form onSubmit={onInviteMember}>\r\n        <Label id=\"member-label\">\r\n          <span>이메일</span>\r\n          <Input id=\"member\" type=\"email\" value={newMember} onChange={onChangeNewMember} />\r\n        </Label>\r\n        <Button type=\"submit\">초대하기</Button>\r\n      </form>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default InviteWorkspaceModal;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const CollapseButton = styled.button<{ collapse: boolean }>`\r\n  background: transparent;\r\n  border: none;\r\n  width: 26px;\r\n  height: 26px;\r\n  display: inline-flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  color: white;\r\n  margin-left: 10px;\r\n  cursor: pointer;\r\n  ${({ collapse }) =>\r\n    collapse &&\r\n    `\r\n    & i {\r\n      transform: none;\r\n    }\r\n  `};\r\n`;\r\n","// import useSocket from '@hooks/useSocket';\r\nimport { CollapseButton } from '@components/DMList/styles';\r\nimport useSocket from '@hooks/useSocket';\r\n// import useSocket from '@hooks/useSocket';\r\nimport { IUser, IUserWithOnline } from '@typings/db';\r\nimport fetcher from '@utils/fetcher';\r\nimport React, { FC, useCallback, useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport { NavLink } from 'react-router-dom';\r\nimport useSWR from 'swr';\r\n\r\nconst DMList: FC = () => {\r\n  const { workspace } = useParams<{ workspace?: string }>();\r\n  const {\r\n    data: userData,\r\n    error,\r\n    mutate,\r\n  } = useSWR<IUser>('/api/users', fetcher, {\r\n    dedupingInterval: 2000, // 2초\r\n  });\r\n  const { data: memberData } = useSWR<IUserWithOnline[]>(\r\n    userData ? `/api/workspaces/${workspace}/members` : null,\r\n    fetcher,\r\n  );\r\n  const [socket] = useSocket(workspace);\r\n  const [channelCollapse, setChannelCollapse] = useState(false);\r\n  const [onlineList, setOnlineList] = useState<number[]>([]);\r\n\r\n  const toggleChannelCollapse = useCallback(() => {\r\n    setChannelCollapse((prev) => !prev);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    console.log('DMList: workspace 바꼈다', workspace);\r\n    setOnlineList([]);\r\n  }, [workspace]);\r\n\r\n  useEffect(() => {\r\n    socket?.on('onlineList', (data: number[]) => {\r\n      setOnlineList(data);\r\n    });\r\n    // socket?.on('dm', onMessage);\r\n    // console.log('socket on dm', socket?.hasListeners('dm'), socket);\r\n    return () => {\r\n      // socket?.off('dm', onMessage);\r\n      // console.log('socket off dm', socket?.hasListeners('dm'));\r\n      socket?.off('onlineList');\r\n    };\r\n  }, [socket]);\r\n\r\n  return (\r\n    <>\r\n      <h2>\r\n        <CollapseButton collapse={channelCollapse} onClick={toggleChannelCollapse}>\r\n          <i\r\n            className=\"c-icon p-channel_sidebar__section_heading_expand p-channel_sidebar__section_heading_expand--show_more_feature c-icon--caret-right c-icon--inherit c-icon--inline\"\r\n            data-qa=\"channel-section-collapse\"\r\n            aria-hidden=\"true\"\r\n          />\r\n        </CollapseButton>\r\n        <span>Direct Messages</span>\r\n      </h2>\r\n      <div>\r\n        {!channelCollapse &&\r\n          memberData?.map((member) => {\r\n            const isOnline = onlineList.includes(member.id);\r\n            return (\r\n              <NavLink key={member.id} activeClassName=\"selected\" to={`/workspace/${workspace}/dm/${member.id}`}>\r\n                <i\r\n                  className={`c-icon p-channel_sidebar__presence_icon p-channel_sidebar__presence_icon--dim_enabled c-presence ${\r\n                    isOnline ? 'c-presence--active c-icon--presence-online' : 'c-icon--presence-offline'\r\n                  }`}\r\n                  aria-hidden=\"true\"\r\n                  data-qa=\"presence_indicator\"\r\n                  data-qa-presence-self=\"false\"\r\n                  data-qa-presence-active=\"false\"\r\n                  data-qa-presence-dnd=\"false\"\r\n                />\r\n                <span>{member.nickname}</span>\r\n                {member.id === userData?.id && <span> (나)</span>}\r\n              </NavLink>\r\n            );\r\n          })}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DMList;\r\n","// import useSocket from '@hooks/useSocket';\r\nimport { CollapseButton } from '@components/DMList/styles';\r\nimport { IChannel, IUser } from '@typings/db';\r\nimport fetcher from '@utils/fetcher';\r\nimport React, { FC, useCallback, useState } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport { NavLink } from 'react-router-dom';\r\nimport useSWR from 'swr';\r\n\r\nconst ChannelList: FC = () => {\r\n  const { workspace } = useParams<{ workspace?: string }>();\r\n  // const [socket] = useSocket(workspace);\r\n  const {\r\n    data: userData,\r\n    error,\r\n    mutate,\r\n  } = useSWR<IUser>('/api/users', fetcher, {\r\n    dedupingInterval: 2000, // 2초\r\n  });\r\n  const { data: channelData } = useSWR<IChannel[]>(userData ? `/api/workspaces/${workspace}/channels` : null, fetcher);\r\n  const [channelCollapse, setChannelCollapse] = useState(false);\r\n\r\n  const toggleChannelCollapse = useCallback(() => {\r\n    setChannelCollapse((prev) => !prev);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <h2>\r\n        <CollapseButton collapse={channelCollapse} onClick={toggleChannelCollapse}>\r\n          <i\r\n            className=\"c-icon p-channel_sidebar__section_heading_expand p-channel_sidebar__section_heading_expand--show_more_feature c-icon--caret-right c-icon--inherit c-icon--inline\"\r\n            data-qa=\"channel-section-collapse\"\r\n            aria-hidden=\"true\"\r\n          />\r\n        </CollapseButton>\r\n        <span>Channels</span>\r\n      </h2>\r\n      <div>\r\n        {!channelCollapse &&\r\n          channelData?.map((channel) => {\r\n            return (\r\n              <NavLink\r\n                key={channel.name}\r\n                activeClassName=\"selected\"\r\n                to={`/workspace/${workspace}/channel/${channel.name}`}\r\n              >\r\n                <span># {channel.name}</span>\r\n              </NavLink>\r\n            );\r\n          })}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ChannelList;\r\n","import fetcher from '@utils/fetcher';\r\nimport axios from 'axios';\r\nimport React, { FC, useCallback, useEffect, useState } from 'react';\r\nimport { Redirect, useParams } from 'react-router';\r\nimport useSWR from 'swr';\r\nimport {\r\n  Header,\r\n  ProfileImg,\r\n  RightMenu,\r\n  WorkspaceWrapper,\r\n  Workspaces,\r\n  Channels,\r\n  Chats,\r\n  WorkspaceName,\r\n  MenuScroll,\r\n  ProfileModal,\r\n  LogOutButton,\r\n  WorkspaceButton,\r\n  AddButton,\r\n  WorkspaceModal,\r\n} from './styles';\r\nimport { Button, Input, Label } from '@pages/SignUp/styles';\r\nimport gravatar from 'gravatar';\r\nimport Menu from '@components/Menu';\r\nimport { Link } from 'react-router-dom';\r\nimport { IChannel, IUser } from '@typings/db';\r\nimport useInput from '@hooks/useInput';\r\nimport Modal from '@components/Modal';\r\nimport { toast } from 'react-toastify';\r\nimport CreateChannelModal from '@components/CreateChannelModal';\r\nimport InviteWorkspaceModal from '@components/InviteWorkspaceModal';\r\nimport InviteChannelModal from '@components/InviteChannelModal';\r\nimport DMList from '@components/DMList';\r\nimport ChannelList from '@components/ChannelList';\r\nimport useSocket from '@hooks/useSocket';\r\n\r\nconst Workspace: FC = ({ children }) => {\r\n  const [showUserMenu, setShowUserMenu] = useState(false);\r\n  const [showCreateWorkspaceModal, setShowCreateWorkspaceModal] = useState(false);\r\n  const [showWorkspaceModal, setShowWorkspaceModal] = useState(false);\r\n  const [showCreateChannelModal, setShowCreateChannelModal] = useState(false);\r\n  const [showInviteWorkspaceModal, setShowInviteWorkspaceModal] = useState(false);\r\n  const [showInviteChannelModal, setShowInviteChannelModal] = useState(false);\r\n  const [newWorkspace, onChangeNewWorkspace, setNewWorkspace] = useInput('');\r\n  const [newUrl, onChangeNewUrl, setNewUrl] = useInput('');\r\n  const { data: userData, error, mutate } = useSWR<IUser | false>('/api/users', fetcher);\r\n\r\n  const { workspace } = useParams<{ workspace: string }>();\r\n  const { data: channelData } = useSWR<IChannel[]>(userData ? `/api/workspaces/${workspace}/channels` : null, fetcher);\r\n\r\n  const { data: memberData } = useSWR<IUser[]>(userData ? `/api/workspaces/${workspace}/members` : null, fetcher);\r\n\r\n  const [socket, disconnect] = useSocket(workspace);\r\n\r\n  useEffect(() => {\r\n    if (channelData && userData && socket) {\r\n      socket.emit('login', { id: userData.id, channels: channelData.map((v) => v.id) });\r\n    }\r\n  }, [socket, channelData, userData]);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      disconnect();\r\n    };\r\n  }, [workspace, disconnect]);\r\n\r\n  const onLogout = useCallback(() => {\r\n    axios\r\n      .post('/api/users/logout', null, {\r\n        withCredentials: true,\r\n      })\r\n      .then(() => {\r\n        mutate(false, false);\r\n      });\r\n  }, []);\r\n\r\n  const onClickUserProfile = useCallback(() => {\r\n    setShowUserMenu((prev) => !prev);\r\n  }, []);\r\n\r\n  const onCloseUserProfile = useCallback((e) => {\r\n    e.stopPropagation();\r\n    setShowUserMenu(false);\r\n  }, []);\r\n\r\n  const onClickCreateWorkspace = useCallback(() => {\r\n    setShowCreateWorkspaceModal(true);\r\n  }, []);\r\n\r\n  const onCreateWorkspace = useCallback(\r\n    (e) => {\r\n      e.preventDefault();\r\n      if (!newWorkspace || !newWorkspace.trim()) return;\r\n      if (!newUrl || !newUrl.trim()) return;\r\n      axios\r\n        .post(\r\n          '/api/workspaces',\r\n          {\r\n            workspace: newWorkspace,\r\n            url: newUrl,\r\n          },\r\n          {\r\n            withCredentials: true,\r\n          },\r\n        )\r\n        .then(() => {\r\n          mutate();\r\n          setShowCreateWorkspaceModal(false);\r\n          setNewWorkspace('');\r\n          setNewUrl('');\r\n        })\r\n        .catch((error) => {\r\n          console.dir(error);\r\n          toast.error((error.response?.data, { position: 'bottom-center' }));\r\n        });\r\n    },\r\n    [newWorkspace, newUrl],\r\n  );\r\n\r\n  const onCloseModal = useCallback(() => {\r\n    setShowCreateWorkspaceModal(false);\r\n    setShowCreateChannelModal(false);\r\n    setShowInviteWorkspaceModal(false);\r\n    setShowInviteChannelModal(false);\r\n  }, []);\r\n\r\n  const toggleWorkspaceModal = useCallback(() => {\r\n    setShowWorkspaceModal((prev) => !prev);\r\n  }, []);\r\n\r\n  const onClickInviteWorkspace = useCallback(() => {\r\n    setShowInviteWorkspaceModal(true);\r\n  }, []);\r\n\r\n  const onClickAddChannel = useCallback(() => {\r\n    setShowCreateChannelModal(true);\r\n  }, []);\r\n\r\n  if (!userData) {\r\n    return <Redirect to=\"/login\" />;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Header>\r\n        <RightMenu>\r\n          <span onClick={onClickUserProfile}>\r\n            <ProfileImg\r\n              src={gravatar.url(userData.email, { s: '28px', d: 'retro' })}\r\n              alt={userData.nickname}\r\n            ></ProfileImg>\r\n            {showUserMenu && (\r\n              <Menu style={{ right: 0, top: 38 }} show={showUserMenu} onCloseModal={onCloseUserProfile}>\r\n                <ProfileModal>\r\n                  <img src={gravatar.url(userData.email, { s: '36px', d: 'retro' })} alt={userData.nickname} />\r\n                  <div>\r\n                    <span id=\"profile-name\">{userData.nickname}</span>\r\n                    <span id=\"profile-active\">Active</span>\r\n                  </div>\r\n                </ProfileModal>\r\n                <LogOutButton onClick={onLogout}>로그아웃</LogOutButton>\r\n              </Menu>\r\n            )}\r\n          </span>\r\n        </RightMenu>\r\n      </Header>\r\n      <WorkspaceWrapper>\r\n        <Workspaces>\r\n          {userData?.Workspaces?.map((ws) => {\r\n            return (\r\n              <Link key={ws.id} to={`/workspace/${123}/channel/일반`}>\r\n                <WorkspaceButton>{ws.name.slice(0, 1).toUpperCase()}</WorkspaceButton>\r\n              </Link>\r\n            );\r\n          })}\r\n          <AddButton onClick={onClickCreateWorkspace}>+</AddButton>\r\n        </Workspaces>\r\n        <Channels>\r\n          <WorkspaceName onClick={toggleWorkspaceModal}>Sleact</WorkspaceName>\r\n          <MenuScroll>\r\n            <Menu show={showWorkspaceModal} onCloseModal={toggleWorkspaceModal} style={{ top: 95, left: 80 }}>\r\n              <WorkspaceModal>\r\n                <h2>Sleact</h2>\r\n                <button onClick={onClickInviteWorkspace}>워크스페이스에 사용자 초대</button>\r\n                <button onClick={onClickAddChannel}>채널 만들기</button>\r\n                <button onClick={onLogout}>로그아웃</button>\r\n              </WorkspaceModal>\r\n            </Menu>\r\n            <ChannelList />\r\n            <DMList />\r\n            {channelData?.map((v) => (\r\n              <div>{v.name}</div>\r\n            ))}\r\n          </MenuScroll>\r\n        </Channels>\r\n        <Chats>{children}</Chats>\r\n      </WorkspaceWrapper>\r\n      <Modal show={showCreateWorkspaceModal} onCloseModal={onCloseModal}>\r\n        <form onSubmit={onCreateWorkspace}>\r\n          <Label id=\"workspace-label\">\r\n            <span>워크스페이스 이름</span>\r\n            <Input id=\"workspace\" value={newWorkspace} onChange={onChangeNewWorkspace} />\r\n          </Label>\r\n          <Label id=\"workspace-url-label\">\r\n            <span>워크스페이스 url</span>\r\n            <Input id=\"workspace\" value={newUrl} onChange={onChangeNewUrl} />\r\n          </Label>\r\n          <Button type=\"submit\">생성하기</Button>\r\n        </form>\r\n      </Modal>\r\n      <CreateChannelModal\r\n        show={showCreateChannelModal}\r\n        onCloseModal={onCloseModal}\r\n        setShowCreateChannelModal={setShowCreateChannelModal}\r\n      />\r\n      <InviteWorkspaceModal\r\n        show={showInviteWorkspaceModal}\r\n        onCloseModal={onCloseModal}\r\n        setShowInviteWorkspaceModal={setShowInviteWorkspaceModal}\r\n      />\r\n      <InviteChannelModal\r\n        show={showInviteChannelModal}\r\n        onCloseModal={onCloseModal}\r\n        setShowInviteChannelModal={setShowInviteChannelModal}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Workspace;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const Header = styled.header`\r\n  text-align: center;\r\n  font-family: Slack-Larsseit, Helvetica Neue, Helvetica, Segoe UI, Tahoma, Arial, sans-serif;\r\n  font-weight: 700;\r\n  font-size: 48px;\r\n  line-height: 46px;\r\n  letter-spacing: -0.75px;\r\n  margin-top: 50px;\r\n  margin-bottom: 50px;\r\n`;\r\n\r\nexport const Form = styled.form`\r\n  margin: 0 auto;\r\n  width: 400px;\r\n  max-width: 400px;\r\n`;\r\n\r\nexport const Label = styled.label`\r\n  margin-bottom: 16px;\r\n  & > span {\r\n    display: block;\r\n    text-align: left;\r\n    padding-bottom: 8px;\r\n    font-size: 15px;\r\n    cursor: pointer;\r\n    line-height: 1.46666667;\r\n    font-weight: 700;\r\n  }\r\n`;\r\n\r\nexport const Input = styled.input`\r\n  border-radius: 4px;\r\n  --saf-0: rgba(var(--sk_foreground_high_solid, 134, 134, 134), 1);\r\n  border: 1px solid var(--saf-0);\r\n  transition: border 80ms ease-out, box-shadow 80ms ease-out;\r\n  box-sizing: border-box;\r\n  margin: 0 0 20px;\r\n  width: 100%;\r\n  color: rgba(var(--sk_primary_foreground, 29, 28, 29), 1);\r\n  background-color: rgba(var(--sk_primary_background, 255, 255, 255), 1);\r\n  padding: 12px;\r\n  height: 44px;\r\n  padding-top: 11px;\r\n  padding-bottom: 13px;\r\n  font-size: 18px;\r\n  line-height: 1.33333333;\r\n  &:focus {\r\n    --saf-0: rgba(var(--sk_highlight, 18, 100, 163), 1);\r\n    box-shadow: 0 0 0 1px var(--saf-0), 0 0 0 5px rgba(29, 155, 209, 0.3);\r\n  }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  margin-bottom: 12px;\r\n  width: 100%;\r\n  max-width: 100%;\r\n  color: #fff;\r\n  background-color: #4a154b;\r\n  border: none;\r\n  font-size: 18px;\r\n  font-weight: 900;\r\n  height: 44px;\r\n  min-width: 96px;\r\n  padding: 0 16px 3px;\r\n  transition: all 80ms linear;\r\n  user-select: none;\r\n  outline: none;\r\n  cursor: pointer;\r\n  border-radius: 4px;\r\n  box-shadow: 0 1px 4px rgba(0, 0, 0, 0.3);\r\n  &:hover {\r\n    background-color: rgba(74, 21, 75, 0.9);\r\n    border: none;\r\n  }\r\n  &:focus {\r\n    --saf-0: rgba(var(--sk_highlight, 18, 100, 163), 1);\r\n    box-shadow: 0 0 0 1px var(--saf-0), 0 0 0 5px rgba(29, 155, 209, 0.3);\r\n  }\r\n`;\r\n\r\nexport const Error = styled.div`\r\n  color: #e01e5a;\r\n  margin: 8px 0 16px;\r\n  font-weight: bold;\r\n`;\r\n\r\nexport const Success = styled.div`\r\n  color: #2eb67d;\r\n  font-weight: bold;\r\n`;\r\n\r\nexport const LinkContainer = styled.p`\r\n  font-size: 13px;\r\n  color: #616061;\r\n  margin: 0 auto 8px;\r\n  width: 400px;\r\n  max-width: 400px;\r\n  & a {\r\n    color: #1264a3;\r\n    text-decoration: none;\r\n    font-weight: 700;\r\n    &:hover {\r\n      text-decoration: underline;\r\n    }\r\n  }\r\n`;\r\n","import axios from 'axios';\r\n\r\nconst fetcher = (url: string) =>\r\n  axios\r\n    .get(url, {\r\n      withCredentials: true,\r\n    })\r\n    .then((response) => response.data);\r\n\r\nexport default fetcher;\r\n","import { IDM, IChat } from '@typings/db';\r\nimport dayjs from 'dayjs';\r\n\r\nexport default function makeSection(chatList: (IDM | IChat)[]) {\r\n  const sections: { [key: string]: (IDM | IChat)[] } = {};\r\n  chatList.forEach((chat) => {\r\n    const monthDate = dayjs(chat.createdAt).format('YYYY-MM-DD');\r\n    if (Array.isArray(sections[monthDate])) {\r\n      sections[monthDate].push(chat);\r\n    } else {\r\n      sections[monthDate] = [chat];\r\n    }\r\n  });\r\n  return sections;\r\n}\r\n"],"names":["ChatArea","styled","_templateObject","_taggedTemplateLiteral","Form","_templateObject2","MentionsTextarea","MentionsInput","_templateObject3","Toolbox","_templateObject4","SendButton","_templateObject5","EachMention","_templateObject6","_ref","focus","chat","onSubmitForm","onChangeChat","placeholder","workspace","useParams","_useSWR","useSWR","fetcher","dedupingInterval","userData","data","memberData","error","mutate","concat","textareaRef","useRef","useEffect","current","autosize","onKeydownChat","useCallback","e","key","shiftKey","preventDefault","renderSuggestion","suggestion","search","highlightedDisplay","index","React","src","gravatar","email","s","d","alt","nickname","onSubmit","id","value","onChange","onKeyDown","inputRef","allowSuggestionsAboveCursor","Mention","appendSpaceOnAdd","trigger","map","v","display","className","trim","type","disabled","ChatZone","Section","StickyHeader","ChatWrapper","Chat","user","Sender","User","result","useMemo","regexifyString","input","content","pattern","decorator","match","arr","Link","to","dayjs","createdAt","format","memo","forwardRef","scrollRef","chatSections","setSize","isReachingEnd","onScroll","values","scrollTop","console","log","prevSize","then","getScrollHeight","scrollHeight","Scrollbars","autoHide","ref","onScrollFrame","Object","entries","_ref2","_ref3","date","chats","show","onCloseModal","setShowInviteChannelModal","_useParams","channel","_useInput2","useInput","newMember","onChangeNewMember","setNewMember","revalidateMembers","onInviteMember","axios","catch","_error$response","dir","toast","response","position","Modal","Label","Input","Button","CreateModal","CloseModalButton","children","stopPropagation","onClick","initialData","_useState2","useState","setValue","target","sockets","disconnect","io","transports","undefined","RightMenu","Header","ProfileImg","ProfileModal","LogOutButton","WorkspaceWrapper","Workspaces","_templateObject7","Channels","_templateObject8","WorkspaceName","_templateObject9","MenuScroll","_templateObject10","WorkspaceModal","_templateObject11","Chats","_templateObject12","AddButton","_templateObject13","WorkspaceButton","_templateObject14","CreateMenu","Menu","style","closeButton","defaultProps","setShowCreateChannelModal","newChannel","onChangeNewChannel","setNewChannel","_useSWR2","revalidateChannel","onCreateChannel","name","withCredentials","setShowInviteWorkspaceModal","revalidateMember","CollapseButton","collapse","socket","_slicedToArray","useSocket","channelCollapse","setChannelCollapse","_useState4","onlineList","setOnlineList","toggleChannelCollapse","prev","on","off","member","isOnline","includes","NavLink","activeClassName","channelData","_userData$Workspaces","showUserMenu","setShowUserMenu","showCreateWorkspaceModal","setShowCreateWorkspaceModal","_useState6","showWorkspaceModal","setShowWorkspaceModal","_useState8","showCreateChannelModal","_useState10","showInviteWorkspaceModal","_useState12","showInviteChannelModal","newWorkspace","onChangeNewWorkspace","setNewWorkspace","_useInput4","newUrl","onChangeNewUrl","setNewUrl","_useSocket2","emit","channels","onLogout","onClickUserProfile","onCloseUserProfile","onClickCreateWorkspace","onCreateWorkspace","url","toggleWorkspaceModal","onClickInviteWorkspace","onClickAddChannel","right","top","ws","slice","toUpperCase","left","ChannelList","DMList","CreateChannelModal","InviteWorkspaceModal","InviteChannelModal","Redirect","Error","Success","LinkContainer","makeSection","chatList","sections","forEach","monthDate","Array","isArray","push"],"sourceRoot":""}